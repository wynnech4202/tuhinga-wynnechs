local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "WP " .. Fluent.Version,
    SubTitle = "by Wynnech",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
}

local selectedTarget = nil 
local loopCount = 0 
local placePartEnabled = false 

local livingFolder = Workspace.Living
local livingChildren = livingFolder:GetChildren()

local PlayerDropdown = Tabs.Main:AddDropdown("Target", {
    Title = "Target",
    Values = {"All", "Others"}, 
    Multi = false,
    Default = 1,
})

local function populatePlayerDropdown()
    local playerNames = {"All", "Others"}
    for _, player in ipairs(Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    PlayerDropdown:SetValues(playerNames)
end

populatePlayerDropdown()

PlayerDropdown:OnChanged(function(value)
    selectedTarget = value
end)

local LoopSlider = Tabs.Main:AddSlider("LoopCountSlider", {
    Title = "KnockBack Percentage Count",
    Description = "Set how many KnockBack Percentage Count (0-300)",
    Default = 0,
    Min = 0,
    Max = 300,
    Rounding = 0,
    Callback = function(Value)
        loopCount = math.floor(Value)
    end
})

local PlacePartToggle = Tabs.Main:AddToggle("PlacePartToggle", {
    Title = "Anti Void",
    Description = "Toggle to place a part",
    Default = false 
})

PlacePartToggle:OnChanged(function(state)
    placePartEnabled = state
    if state then
        local floorPath = Workspace.Map.Crossroads.Room.Floor
        local part = Instance.new("Part")
        part.Size = Vector3.new(5000, 20, 5000)
        part.Position = floorPath.Position
        part.Anchored = true
        part.CanCollide = false
        part.Transparency = 0.5
        part.BrickColor = BrickColor.new("Bright blue")
        part.Parent = Workspace
        part.Name = "TeleportPart" 
    else
        local existingPart = Workspace:FindFirstChild("TeleportPart")
        if existingPart then
            existingPart:Destroy()
        end
    end
end)

local function FireServerToTarget(target)
    local ohInstance1 = target
    local ohVector32 = Vector3.new(1, 1, 1)
    local ohVector33 = Vector3.new(0, 100, 0)
    game:GetService("ReplicatedStorage").Remotes.koReflect:FireServer(ohInstance1, ohVector32, ohVector33)
end

local function FireServerToAll()
    local updatedLivingChildren = livingFolder:GetChildren() 
    for _, child in ipairs(updatedLivingChildren) do
        FireServerToTarget(child)
    end
end

local function FireServerToOthers()
    local myPlayer = Players.LocalPlayer
    local updatedLivingChildren = livingFolder:GetChildren()
    local affectedPlayers = {}

    for _, child in ipairs(updatedLivingChildren) do
        if child ~= myPlayer.Character then
            FireServerToTarget(child)
            table.insert(affectedPlayers, child.Name)
        end
    end

    return affectedPlayers
end

local function ExecuteAction()
    local dividedLoopCount = math.floor(loopCount / 2)
    local playersNotified = {}
    local successNotifications = {}
    local failureNotifications = {}

    for _ = 1, dividedLoopCount do
        local success = false
        if selectedTarget == "All" then
            FireServerToAll()
            success = true
            for _, player in ipairs(Players:GetPlayers()) do
                if not playersNotified[player.Name] then
                    table.insert(playersNotified, player.Name)
                    playersNotified[player.Name] = true
                end
            end
        elseif selectedTarget == "Others" then
            local affectedPlayers = FireServerToOthers()
            if #affectedPlayers > 0 then
                success = true
                for _, playerName in ipairs(affectedPlayers) do
                    if not playersNotified[playerName] then
                        table.insert(playersNotified, playerName)
                        playersNotified[playerName] = true
                    end
                end
            end
        else
            local target = livingFolder:FindFirstChild(selectedTarget)
            if target then
                FireServerToTarget(target)
                success = true
                if not playersNotified[selectedTarget] then
                    table.insert(playersNotified, selectedTarget)
                    playersNotified[selectedTarget] = true
                end
            else
                table.insert(failureNotifications, "Target not found: " .. selectedTarget)
            end
        end

        if success then
            table.insert(successNotifications, "Sent remote to: " .. selectedTarget)
        end
    end

    -- Notify about success
    if #successNotifications > 0 then
        Fluent:Notify({
            Title = "Remote Sent",
            Content = table.concat(successNotifications, "\n"),
            Duration = 10
        })
    end

    -- Notify about failures
    if #failureNotifications > 0 then
        Fluent:Notify({
            Title = "Error",
            Content = table.concat(failureNotifications, "\n"),
            Duration = 10
        })
    end
end

local ExecuteButton = Tabs.Main:AddButton({
    Title = "Give KnockBack Percentage",
    Description = "KnockBack Percentage to selected target",
    Callback = ExecuteAction
})

local Keybind = Tabs.Main:AddKeybind("Keybind", {
    Title = "KeyBind",
    Mode = "Toggle", 
    Default = "T", 
    Callback = function(Value)
        ExecuteAction()
    end,
    ChangedCallback = function(New)
        print("Keybind changed!", New)
    end
})

Keybind:OnClick(function()
    print("Keybind clicked:", Keybind:GetState())
end)

Keybind:OnChanged(function()
    print("Keybind changed:", Keybind.Value)
end)

task.spawn(function()
    while true do
        wait(1)
        local state = Keybind:GetState()
        if state then
            print("Keybind is being held down")
        end
        if Fluent.Unloaded then break end
    end
end)

Keybind:SetValue("T", "Toggle") 

Players.PlayerAdded:Connect(populatePlayerDropdown)
Players.PlayerRemoving:Connect(populatePlayerDropdown)

local teleportPart = Workspace:WaitForChild("TeleportPart")
teleportPart.Touched:Connect(function(hit)
    local character = hit.Parent
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local teleportLocation = Workspace.Map.Crossroads.Trees.Model.Model.Ball.Position
        humanoid.RootPart.CFrame = CFrame.new(teleportLocation)
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            local initialVelocity = humanoidRootPart.Velocity
            local startTime = tick()
            local duration = 0.3
            while tick() - startTime < duration do
                local t = (tick() - startTime) / duration
                humanoidRootPart.Velocity = initialVelocity * (1 - t)
                wait()
            end
            humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
            humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
            humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
        end
    end
end)

Window:SelectTab(1)

Fluent:Notify({
    Title = "WP (Wynnech Private)",
    Content = "The script has been loaded.",
    Duration = 8
})
